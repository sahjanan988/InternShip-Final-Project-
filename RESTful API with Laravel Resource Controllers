Understanding Resource Controllers
Laravel's resource controllers provide a convenient way to define RESTful API routes and their corresponding controller actions. They automatically generate common HTTP methods (GET, POST, PUT, DELETE) for CRUD operations.

Creating a Resource Controller
Let's create a PostController to manage blog posts:

Bash
php artisan make:controller PostController --resource
Use code with caution.

This command will generate a PostController file with the following methods:

PHP
// app/Http/Controllers/PostController.php

namespace App\Http\Controllers;

use App\Models\Post;
use Illuminate\Http\Request;

class PostController   
 extends Controller
{
    /**
     * Display a listing of the resource.   

     */
    public function index()
    {
        return Post::all();
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $post = Post::create($request->all());   

        return response()->json($post, 201);
    }

    /**
     * Display the specified resource.
     */
    public function show(Post $post)
    {
        return   
 $post;
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, Post   
 $post)
    {
        $post->update($request->all());
        return response()->json($post, 200);
    }

    /**
     * Remove the specified resource from storage.   

     */
    public function destroy(Post $post)
    {
        $post->delete();
        return response()->json(null, 204);
    }
}
Use code with caution.

Defining Routes
In routes/api.php, you can define the routes:

PHP
Route::apiResource('posts', PostController::class);
Use code with caution.

This single line defines routes for all CRUD operations:

GET /api/posts: Lists all posts
POST /api/posts: Creates a new post
GET /api/posts/{post}: Shows a specific post
PUT /api/posts/{post}: Updates a specific post
DELETE /api/posts/{post}: Deletes a specific post
